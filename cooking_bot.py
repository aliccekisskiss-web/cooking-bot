import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CallbackQueryHandler, CommandHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8496448297:AAH-3Mi2MJ0xRWel4eURTki2HbgK66XOsW4')

# –í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã
RECIPES = {
    "–ó–∞–≤—Ç—Ä–∞–∫": {
        "–ì–æ—Ä—è—á–µ–µ": [
            {
                "name": "üç≥ –û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º",
                "ingredients": ["–Ø–π—Ü–∞ - 3 —à—Ç.", "–ú–æ–ª–æ–∫–æ - 50 –º–ª", "–°—ã—Ä - 50 –≥", "–°–æ–ª—å, –ø–µ—Ä–µ—Ü"],
                "recipe": "1. –í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ —Å –º–æ–ª–æ–∫–æ–º\n2. –ù–∞—Ç—Ä–∏—Ç–µ —Å—ã—Ä\n3. –†–∞–∑–æ–≥—Ä–µ–π—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥—É\n4. –ñ–∞—Ä—å—Ç–µ 5-7 –º–∏–Ω—É—Ç –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π"
            }
        ]
    },
    "–û–±–µ–¥": {
        "–ì–æ—Ä—è—á–µ–µ": [
            {
                "name": "üçú –ö—É—Ä–∏–Ω—ã–π —Å—É–ø",
                "ingredients": ["–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ - 200 –≥", "–í–æ–¥–∞ - 1.5 –ª", "–õ–∞–ø—à–∞ - 100 –≥", "–ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç.", "–õ—É–∫ - 1 —à—Ç."],
                "recipe": "1. –°–≤–∞—Ä–∏—Ç–µ –∫—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω\n2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ–≤–æ—â–∏\n3. –í–∞—Ä–∏—Ç–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"
            }
        ]
    },
    "–î–µ—Å–µ—Ä—Ç—ã": {
        "–í—ã–ø–µ—á–∫–∞": [
            {
                "name": "ü•ï –ú–æ—Ä–∫–æ–≤–Ω—ã–π –∫–µ–∫—Å",
                "ingredients": ["–ú—É–∫–∞ - 2 –∫—Ä—É–∂–∫–∏", "–°–∞—Ö–∞—Ä - 1 –∫—Ä—É–∂–∫–∞", "–ú–æ—Ä–∫–æ–≤—å - 2 —à—Ç.", "–Ø–π—Ü–∞ - 3 —à—Ç.", "–ú–∞—Å–ª–æ - 2/3 –∫—Ä—É–∂–∫–∏"],
                "recipe": "1. –ù–∞—Ç—Ä–∏—Ç–µ –º–æ—Ä–∫–æ–≤—å\n2. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n3. –í—ã–ø–µ–∫–∞–π—Ç–µ 50-60 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C"
            }
        ]
    }
}

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data='–ó–∞–≤—Ç—Ä–∞–∫')],
        [InlineKeyboardButton("üç≤ –û–±–µ–¥", callback_data='–û–±–µ–¥')],
        [InlineKeyboardButton("üç∞ –î–µ—Å–µ—Ä—Ç—ã", callback_data='–î–µ—Å–µ—Ä—Ç—ã')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)

def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    message = query.message

    if data in ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–î–µ—Å–µ—Ä—Ç—ã']:
        dish_types = list(RECIPES[data].keys())
        keyboard = []
        for dish_type in dish_types:
            keyboard.append([InlineKeyboardButton(dish_type, callback_data=f'—Ç–∏–ø_{data}_{dish_type}')])
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        message.edit_text(text=f"üçΩÔ∏è {data}. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:", reply_markup=reply_markup)

    elif data == 'main_menu':
        keyboard = [
            [InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data='–ó–∞–≤—Ç—Ä–∞–∫')],
            [InlineKeyboardButton("üç≤ –û–±–µ–¥", callback_data='–û–±–µ–¥')],
            [InlineKeyboardButton("üç∞ –î–µ—Å–µ—Ä—Ç—ã", callback_data='–î–µ—Å–µ—Ä—Ç—ã')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message.edit_text(text='üë®‚Äçüç≥ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)

    elif data.startswith('—Ç–∏–ø_'):
        parts = data.split('_')
        meal_type, dish_type = parts[1], parts[2]
        dishes = RECIPES[meal_type][dish_type]
        
        keyboard = []
        for index, dish in enumerate(dishes):
            keyboard.append([InlineKeyboardButton(dish['name'], callback_data=f'–±–ª—é–¥–æ_{meal_type}_{dish_type}_{index}')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data=meal_type)])
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message.edit_text(text=f"üìã {meal_type}, {dish_type}. –í—ã–±–µ—Ä–∏ –±–ª—é–¥–æ:", reply_markup=reply_markup)

    elif data.startswith('–±–ª—é–¥–æ_'):
        parts = data.split('_')
        meal_type, dish_type, dish_index = parts[1], parts[2], int(parts[3])
        dish = RECIPES[meal_type][dish_type][dish_index]

        recipe_text = f"üç≥ <b>{dish['name']}</b>\n\n"
        recipe_text += "üìã <u>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</u>\n"
        for ingredient in dish['ingredients']:
            recipe_text += f"‚Ä¢ {ingredient}\n"
        recipe_text += f"\nüë©‚Äçüç≥ <u>–†–µ—Ü–µ–ø—Ç:</u>\n{dish['recipe']}"

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f'—Ç–∏–ø_{meal_type}_{dish_type}')],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message.edit_text(text=recipe_text, reply_markup=reply_markup, parse_mode='HTML')

def main():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Updater –≤–º–µ—Å—Ç–æ Application –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    updater = Updater(BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_click))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
